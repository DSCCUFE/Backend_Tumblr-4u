{
  "stats": {
    "suites": 0,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-02T14:00:29.902Z",
    "end": "2022-01-02T14:00:29.911Z",
    "duration": 9,
    "testsRegistered": 71,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 71,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "9945983e-c1e9-47af-a389-d339dde16ce2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f5d95a08-ae1e-4459-8327-c32da9d10097",
          "title": "Post APIs",
          "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
          "file": "\\test\\postTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "455a79ef-eb2c-41e3-b888-f60a38084426",
              "title": "Function createPost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create New Post",
                  "fullTitle": "Post APIs Function createPost It Should Create New Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04',\n  },\n  body: {\n    postHtml: '</>',\n    type: 'link',\n    state: 'published',\n    tags: ['tumblr', 'cmp'],\n  },\n};\npostFunctions.createPost(req.params.blogId, req.body.postHtml, req.body.type, req.body.state, req.body.tags).then((ret) => {\n  expect(ret).to.be.a('string');\n  expect(ret).to.be.eq('Post Created Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "40cbf6be-02ef-4895-b704-163d9009ba2f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "40cbf6be-02ef-4895-b704-163d9009ba2f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "2dc908ae-246e-4170-a0cc-61622cfdc021",
              "title": "Function showPost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Show Post",
                  "fullTitle": "Post APIs Function showPost It Should Show Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  url: '',\n  params: {\n    postId: '61ca5d91a8a4556c5b24f1f4',\n  },\n};\npostFunctions.showPost(req.url,req.params.postId).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Post Returned Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "47a2a09a-a636-4fbe-87bd-9e77fd1205d8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "47a2a09a-a636-4fbe-87bd-9e77fd1205d8"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "2cc926e6-b8db-49ec-ab5b-20b10dba390f",
              "title": "Function makeComment",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Make Comment",
                  "fullTitle": "Post APIs Function makeComment It Should Make Comment",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04',\n    postId: '61ca5d91a8a4556c5b24f1f4',\n  },\n  body: {\n    text: 'Very Good Post',\n  },\n};\npostFunctions.makeComment(req.params.blogId, req.params.postId, req.body.text).then((ret) => {\n  expect(ret).to.be.a('string');\n  expect(ret).to.be.eq('Comment Posted Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "80e5bc7d-712f-4f22-9580-c6c8629b7383",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "80e5bc7d-712f-4f22-9580-c6c8629b7383"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "d6012582-1f72-4b3a-9659-3bb52d074787",
              "title": "Function removeComment",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Remove a Comment",
                  "fullTitle": "Post APIs Function removeComment It Should Remove a Comment",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    postId: '61ca5d91a8a4556c5b24f1f4',\n    commentId: '61d0896fdfed7734fc1afcfe',\n  },\n};\npostFunctions.removeComment(req.params.postId, req.params.commentId)\n    .then((ret) => {\n      expect(ret).to.be.a('string');\n      expect(ret).to.be.eq('Comment Removed Successfully');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "ec68156f-44bc-46bc-a7b2-5d35b24e34f4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ec68156f-44bc-46bc-a7b2-5d35b24e34f4"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "60c399b0-cf84-4b02-835f-b656dd14c348",
              "title": "Function reblogPost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Reblog a Post",
                  "fullTitle": "Post APIs Function reblogPost It Should Reblog a Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04',\n    postId: '61ca5d91a8a4556c5b24f1f4',\n  },\n  body: {\n    text: 'Very Good Post',\n  },\n};\npostFunctions.reblogPost(req.params.blogId, req.params.postId, req.body.text)\n    .then((ret) => {\n      expect(ret).to.be.a('string');\n      expect(ret).to.be.eq('Post Reblogged Successfully');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "48e07fe6-7c08-49aa-98e9-a6b1773a1bcf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "48e07fe6-7c08-49aa-98e9-a6b1773a1bcf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "7ffd3879-8afa-4f87-a8ad-e7b5f32a9895",
              "title": "Function removeReblog",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Remove a Reblog",
                  "fullTitle": "Post APIs Function removeReblog It Should Remove a Reblog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    postId: '61ca5d91a8a4556c5b24f1f4',\n    reblogId: '61d08579d8591f8b72b7b4c9',\n  },\n};\npostFunctions.removeReblog(req.params.postId, req.params.reblogId)\n    .then((ret) => {\n      expect(ret).to.be.a('string');\n      expect(ret).to.be.eq('Reblog Removed Successfully');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "4ffba912-5566-46e5-838b-dd3c40691c5a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "4ffba912-5566-46e5-838b-dd3c40691c5a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "728d3027-d677-42c9-918c-de7bdb337cd9",
              "title": "Function loopLikeAndCheck",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Loop on an Array and Check if an Element Exists",
                  "fullTitle": "Post APIs Function loopLikeAndCheck It Should Loop on an Array and Check if an Element Exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = '61af36a793d7c3194ff42269';\nconst b = '61ae881aab9ea73f2282b03e';\nconst c = '61ae887d2676ed5d9b5d532f';\nconst arr = [\n  {isDeleted: false, blogId: a},\n  {isDeleted: false, blogId: b},\n  {isDeleted: false, blogId: c},\n];\nconst element = '61ae881aab9ea73f2282b03e';\npostFunctions.loopLikeAndCheck(arr, element)[0].should.be.eq(1);\npostFunctions.loopLikeAndCheck(arr, element)[1].should.be.eq(0);\npostFunctions.loopLikeAndCheck(arr, element)[2].should.be.eq(1);\ndone();",
                  "err": {},
                  "uuid": "21548efd-f2f0-4baf-a8b1-cb8be3743254",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "21548efd-f2f0-4baf-a8b1-cb8be3743254"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "83b93122-6208-40d5-83bf-787d03e67aa7",
              "title": "Function loopObjAndCheck",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Loop on an Object in an Array and Check if an Id Exists",
                  "fullTitle": "Post APIs Function loopObjAndCheck It Should Loop on an Object in an Array and Check if an Id Exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = mongoose.Types.ObjectId('61af36a793d7c3194ff42269');\nconst b = mongoose.Types.ObjectId('61ae881aab9ea73f2282b03e');\nconst c = mongoose.Types.ObjectId('61ae887d2676ed5d9b5d532f');\nconst arr = [\n  {isDeleted: false, _id: a},\n  {isDeleted: false, _id: b},\n  {isDeleted: false, _id: c},\n];\nconst element = '61ae881aab9ea73f2282b03e';\npostFunctions.loopObjAndCheck(arr, element)[0].should.be.eq(1);\npostFunctions.loopObjAndCheck(arr, element)[1].should.be.eq(1);\ndone();",
                  "err": {},
                  "uuid": "88c397da-145f-4062-b9a1-1d33fabb2620",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "88c397da-145f-4062-b9a1-1d33fabb2620"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "7813af3e-0b36-4daa-af68-f482764efd66",
              "title": "Function likePress",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Like or Unlike a Post",
                  "fullTitle": "Post APIs Function likePress It Should Like or Unlike a Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04',\n    postId: '61ca5d91a8a4556c5b24f1f4',\n  },\n};\npostFunctions.likePress(req.params.blogId, req.params.postId).then((ret) => {\n  expect(ret).to.be.a('string');\n  // expect(ret).to.be.eq('Post Liked Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "16956878-21fd-4367-b68c-a26240afa7d7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "16956878-21fd-4367-b68c-a26240afa7d7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "e607e8b8-b084-4c91-a636-3c7fdf6bbd47",
              "title": "Function getNotes",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Get Post Notes",
                  "fullTitle": "Post APIs Function getNotes It Should Get Post Notes",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    notesId: '61ca5d92a8a4556c5b24f1f9',\n  },\n};\npostFunctions.getNotes(req.params.notesId).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Notes Got Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "2f178d9e-2f34-451f-922d-8118dce6218e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2f178d9e-2f34-451f-922d-8118dce6218e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "329c1bdb-583e-4111-923f-a3a1cfe1b6df",
              "title": "Function getDashboard",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Get Dashboard",
                  "fullTitle": "Post APIs Function getDashboard It Should Get Dashboard",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  decoded: {\n    email: 'ahmed.ayman.1420@gmail.com'\n  },\n};\npostFunctions.getDashboard(req.decoded.email).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Dashboard Got Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "936fd753-d77d-4043-bd88-e3f8a716247a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "936fd753-d77d-4043-bd88-e3f8a716247a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "7b11c1e0-cd05-46ea-93c3-e68e53cf4976",
              "title": "Function editPost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Edit a Post Post",
                  "fullTitle": "Post APIs Function editPost It Should Edit a Post Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    postId: '61cd7bd4c53c43b422960a2c',\n  },\n  body: {\n    postHtml: '</>',\n    tags: ['tumblr', 'cmp'],\n  },\n};\npostFunctions.editPost(req.params.postId, req.body.postHtml, req.body.tags).then((ret) => {\n  expect(ret).to.be.a('string');\n  expect(ret).to.be.eq('Post Edited Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "29c55a35-3cd7-453d-a433-35e3c13151cb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "29c55a35-3cd7-453d-a433-35e3c13151cb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "e0bb9cfc-9bab-456a-981b-cc33088e7490",
              "title": "Function reportPost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Report a Post",
                  "fullTitle": "Post APIs Function reportPost It Should Report a Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    postId: '61cd7bd4c53c43b422960a2c',\n  },\n};\npostFunctions.reportPost(req.params.postId).then((ret) => {\n  expect(ret).to.be.a('string');\n  expect(ret).to.be.eq('Post Reported Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "a909cf82-cdd2-4ee1-9211-b8f38b2c7965",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a909cf82-cdd2-4ee1-9211-b8f38b2c7965"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "16e860c2-e1e1-4930-af66-02dff708196a",
              "title": "Function deletePost",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Delete a Post",
                  "fullTitle": "Post APIs Function deletePost It Should Delete a Post",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    postId: '61ca5d94a8a4556c5b24f233',\n  },\n};\npostFunctions.deletePost(req.params.postId).then((ret) => {\n  expect(ret).to.be.a('string');\n  expect(ret).to.be.eq('Post Deleted Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "634b757c-7bb5-4819-9354-a61629bbfd2d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "634b757c-7bb5-4819-9354-a61629bbfd2d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "d17e621d-6a65-4823-a373-36a731ce2766",
              "title": "Function getBlogPosts",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should get Blog Posts",
                  "fullTitle": "Post APIs Function getBlogPosts It Should get Blog Posts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04'\n  },\n};\npostFunctions.getBlogPosts(req.params.blogId).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Blog Posts Got Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "6ae5f878-6dad-4d54-9b86-fbe525a6b7dd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6ae5f878-6dad-4d54-9b86-fbe525a6b7dd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "bd5acaee-7f43-430b-b583-b80d33dce833",
              "title": "Function getLikedPosts",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Get Liked Posts",
                  "fullTitle": "Post APIs Function getLikedPosts It Should Get Liked Posts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04'\n  },\n};\npostFunctions.getLikedPosts(req.params.blogId).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Liked Posts Got Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "eeed8f0f-3c24-4719-bfcf-f82f53dc66f2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "eeed8f0f-3c24-4719-bfcf-f82f53dc66f2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "9187f104-4d45-49a8-ba55-479e127f4d1a",
              "title": "Function activityFeed",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Get Activity Feed",
                  "fullTitle": "Post APIs Function activityFeed It Should Get Activity Feed",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    blogId: '61c9d6b82569f9abb33ebe04'\n  },\n};\npostFunctions.activityFeed(req.params.blogId).then((ret) => {\n  expect(ret).to.be.a('object');\n  expect(ret.msg).to.be.eq('Activity Feed Got Successfully');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "530fd261-1497-4fab-8a19-d0792a672a44",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "530fd261-1497-4fab-8a19-d0792a672a44"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "dc519661-25c7-4101-bc87-94233e594bcd",
              "title": "Upload media APIs",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It tests uploading image on server, gets url",
                  "fullTitle": "Post APIs Upload media APIs It tests uploading image on server, gets url",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blobName = 'image2022-1-1T03-59-05.770Z.jpg';\n    \npostFunctions.uploadAny(blobName, 'image/jpeg')\n    .then((res)=>{\n      expect(res)\n        .to.be.equal('https://tumblrstorage.blob.core.windows.net/imagess/'+blobName);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "ee80c6e9-c82c-4368-8b79-e9dcaaadd947",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It tests uploading video on server, gets url",
                  "fullTitle": "Post APIs Upload media APIs It tests uploading video on server, gets url",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blobName = 'video2022-01-01T15-23-27.384Z.mp4';\n    \npostFunctions.uploadAny(blobName, 'video/mp4')\n    .then((res)=>{\n      expect(res)\n        .to.be.equal('https://tumblrstorage.blob.core.windows.net/imagess/'+blobName);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "c5e79e45-9432-4847-8f89-99f625c6904b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It tests uploading audio on server, gets url",
                  "fullTitle": "Post APIs Upload media APIs It tests uploading audio on server, gets url",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blobName = 'audio2021-12-28T04-06-07.388Z.mpeg';\n    \npostFunctions.uploadAny(blobName, 'audio/mpeg')\n    .then((res)=>{\n      expect(res)\n        .to.be.equal('https://tumblrstorage.blob.core.windows.net/imagess/'+blobName);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "2d74bdc1-88fb-4a76-9853-1965ced887bf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ee80c6e9-c82c-4368-8b79-e9dcaaadd947",
                "c5e79e45-9432-4847-8f89-99f625c6904b",
                "2d74bdc1-88fb-4a76-9853-1965ced887bf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "ea127a88-93f4-46e5-8f63-8b25170d136c",
              "title": "Random posts APIs",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\postTest.js",
              "file": "\\test\\postTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It tests radar posts",
                  "fullTitle": "Post APIs Random posts APIs It tests radar posts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "postFunctions.retrieveRandomPosts()\n        .then((res)=>{\n          expect(res.length).to.be.equal(10);\n          done();\n        }).catch(done);",
                  "err": {},
                  "uuid": "983eae4f-acd3-4a56-9c31-2b080047312e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It tests trending posts",
                  "fullTitle": "Post APIs Random posts APIs It tests trending posts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post=[\n  {\n    \"_id\": \"61ca5d91a8a4556c5b24f1f4\",\n    \"blogId\": '61c9d6b82569f9abb33ebe04',\n    \"postHtml\": '<img width=\"100%\" src=\"https://tumblrstorage.blob.core.windows.net/imagess/image2022-1-1T03-59-05.770Z.jpg]\" alt=\"\">',\n    \"type\": 'text',\n    \"state\": 'published',\n    \"tags\": [ 'edit', 'cmp', 'Trending' ],\n    \"notesId\": '61ca5d91a8a4556c5b24f1f3',\n    \"isDeleted\": false,\n    \"isReported\": false,\n    \"postUrl\": '/61ca5d91a8a4556c5b24f1f4/show_post',\n    \"__v\": 1\n  }\n]\npostFunctions.retrieveTrendingPosts()\n    .then((res)=>{\n      expect(res.trendingPostsLim[0].notesId).to.be.equal(post[0].notesId);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "c5e6e887-c11c-495f-a5ad-b57b4c636321",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "983eae4f-acd3-4a56-9c31-2b080047312e",
                "c5e6e887-c11c-495f-a5ad-b57b4c636321"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "cfce9c78-0038-4088-bb34-a8604eec184a",
          "title": "Search APIs",
          "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\searchTest.js",
          "file": "\\test\\searchTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f03b861c-d377-4624-ab9e-e2deb2c91b2c",
              "title": "Search Dashboard Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\searchTest.js",
              "file": "\\test\\searchTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should get element of hashtags in posts",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get element of hashtags in posts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  wordName: 'cm',\n};\nsearch.autoCompleteSearchDashWord(wordName.wordName)\n    .then((res)=>{\n      expect(res.resultHashTag[0]).to.be.equal('cmp');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "72812d97-93ed-4945-b672-c1f1e0753e84",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It shows that it is not case sensitive",
                  "fullTitle": "Search APIs Search Dashboard Testing It shows that it is not case sensitive",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  wordName: 'CM',\n};\nsearch.autoCompleteSearchDashWord(wordName.wordName)\n    .then((res)=>{\n      expect(res.resultHashTag[0]).to.be.equal('cmp');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "fdc377e4-62b5-4356-834e-efebbaf55ba3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should get posts has the hashtags with the regex",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get posts has the hashtags with the regex",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  wordName: 'cm',\n};\nsearch.autoCompleteSearchDashWord(wordName.wordName)\n    .then((res)=>{\n      post=[\n        {\n          \"_id\": \"61ca5d91a8a4556c5b24f1f4\",\n          \"blogId\": \"61c9d6b82569f9abb33ebe04\",\n          \"postHtml\": \"<img width=\\\"100%\\\" src=\\\"https://64.media.tumblr.com/45dde30f17353eb13ca1be55063e3484/1ef148912162fc2f-7e/s400x600/739708b94fe41c6b50eee06fd95d8d08eeaa0cb4.jpg]\\\" alt=\\\"\\\">\",\n          \"type\": \"text\",\n          \"state\": \"published\",\n          \"tags\": [\n              \"edit\",\n              \"cmp\",\n              \"Trending\"\n          ],\n          \"notesId\": \"61ca5d91a8a4556c5b24f1f3\",\n          \"isDeleted\": false,\n          \"isReported\": false,\n          \"postUrl\": \"/61ca5d91a8a4556c5b24f1f4/show_post\",\n          \"__v\": 1\n      },\n      ];\n      expect(res.resultPostHashTag[0].blogId).to.be.equal(post[0].blogId);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "5e31289b-8343-41d8-b6ff-5663b6a37a75",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should get blog with the regex",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get blog with the regex",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  wordName: 'CMP',\n};\nsearch.autoCompleteSearchDashWord(wordName.wordName)\n    .then((res)=>{\n      expect(res.resultBlogs[0].name)\n          .to.be.equal('CMP-2023');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "e100e913-28a4-4349-8d93-50e7aec875f8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should get followed/interested tags by a user",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get followed/interested tags by a user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  userEmail: 'ahmed.ayman.1420@gmail.com',\n};\nsearch.autoCompleteSearchDash(wordName.userEmail)\n    .then((res)=>{\n      // console.log(res);\n      expect(res.resultFollowedTag[2]).to.be.equal('Writing');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "d65e4d63-5c20-4b1d-b1d8-6789f67f5f9d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should get interests when no word is entered",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get interests when no word is entered",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  userEmail: 'ahmed.ayman.1420@gmail.com',\n};\nsearch.autoCompleteSearchDash(wordName.userEmail)\n    .then((res)=>{\n      // console.log(res);\n      expect(res.resultFollowedTag[3]).to.be.equal('Sports');\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "c2f5f9b1-3798-4909-aa83-1130b0829f14",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should get posts has interested hashtags",
                  "fullTitle": "Search APIs Search Dashboard Testing It Should get posts has interested hashtags",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wordName ={\n  userEmail: 'ahmed.ayman.1420@gmail.com',\n};\nsearch.autoCompleteSearchDash(wordName.userEmail)\n    .then((res)=>{\n      post=[\n        {\n          \"_id\": \"61ca5d91a8a4556c5b24f1f4\",\n          \"blogId\": \"61c9d6b82569f9abb33ebe04\",\n          \"postHtml\": \"<img width=\\\"100%\\\" src=\\\"https://64.media.tumblr.com/45dde30f17353eb13ca1be55063e3484/1ef148912162fc2f-7e/s400x600/739708b94fe41c6b50eee06fd95d8d08eeaa0cb4.jpg]\\\" alt=\\\"\\\">\",\n          \"type\": \"text\",\n          \"state\": \"published\",\n          \"tags\": [\n              \"edit\",\n              \"cmp\",\n              \"Trending\"\n          ],\n          \"notesId\": \"61ca5d91a8a4556c5b24f1f3\",\n          \"isDeleted\": false,\n          \"isReported\": false,\n          \"postUrl\": \"/61ca5d91a8a4556c5b24f1f4/show_post\",\n          \"__v\": 1\n      },\n      ];\n      // console.log('res.resultPostHashTag[0].blogId: ', res);\n      expect(res.resultPostHashTag[0].blogId).to.be.equal(post[0].blogId);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "93efd58e-bd2a-44ef-ba3c-ec0590aaac7e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "72812d97-93ed-4945-b672-c1f1e0753e84",
                "fdc377e4-62b5-4356-834e-efebbaf55ba3",
                "5e31289b-8343-41d8-b6ff-5663b6a37a75",
                "e100e913-28a4-4349-8d93-50e7aec875f8",
                "d65e4d63-5c20-4b1d-b1d8-6789f67f5f9d",
                "c2f5f9b1-3798-4909-aa83-1130b0829f14",
                "93efd58e-bd2a-44ef-ba3c-ec0590aaac7e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "84ffb735-065a-46f4-a72d-e3117fae3ee4",
          "title": "UserBlog Methodes Testing",
          "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
          "file": "\\test\\userBlogTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It gets checkout these blogs",
              "fullTitle": "UserBlog Methodes Testing It gets checkout these blogs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "blogFunctions.retrieveRandomBlogs()\n    .then((res)=>{\n    expect(res.length).to.be.equal(10);\n    done();\n    }).catch(done);",
              "err": {},
              "uuid": "d72e3c71-52e5-4ce8-b1f5-7d7d73b3c945",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [
            {
              "uuid": "7f579933-62c0-45e8-939c-38d834cbecf3",
              "title": "Create Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new blog",
                  "fullTitle": "UserBlog Methodes Testing Create Blog Testing should create a new blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n decoded: {\n    email:email,\n  },\n  body:\n   {\n     title: 'Engineering',\n     name:blogName ,\n     privacy: false,\n   },\n};\nuserFunctions.createBlog(func_params).then((res)=>{\n  expect(res).to.be.a('object');\n  expect(res.name).to.be.eq( blogName);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "8fcb7d4d-25f9-47b8-9475-d6dc08d09b7d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return false because there is already a blog with the same name",
                  "fullTitle": "UserBlog Methodes Testing Create Blog Testing should return false because there is already a blog with the same name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  decoded: {\n     email: email,\n   },\n   body:\n    {\n      title: 'Engineering',\n      name:blogName,\n      privacy: false,\n    },\n };\nuserFunctions.createBlog(func_params).then((res)=>{\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "8cbe53c9-4a23-4965-945a-06ce7ab9e67c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8fcb7d4d-25f9-47b8-9475-d6dc08d09b7d",
                "8cbe53c9-4a23-4965-945a-06ce7ab9e67c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "fe851993-659f-43db-a4ff-446f04bd6ea7",
              "title": "Retrieve Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve all the blog info given its name",
                  "fullTitle": "UserBlog Methodes Testing Retrieve Blog Testing should retrieve all the blog info given its name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "blogFunctions.retrieveBlog('61c9e680b47e807b87e3dbe9').then((res) => {\n  expect(res).to.be.a('object');\n  expect(res.name).to.be.eq('Diana');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "8f878dc6-b358-4187-83fe-48e86f178dcb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no blog with the given name",
                  "fullTitle": "UserBlog Methodes Testing Retrieve Blog Testing should return null as there is no blog with the given name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "blogFunctions.retrieveBlog('61b33c94c4bab40beeb82b6f').then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "1b3e1e88-aa1c-4f27-aa99-38d1f9676b61",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8f878dc6-b358-4187-83fe-48e86f178dcb",
                "1b3e1e88-aa1c-4f27-aa99-38d1f9676b61"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "79c9e021-12c0-47a0-aab1-aa14676597c9",
              "title": "Edit Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should edit the blog and return object",
                  "fullTitle": "UserBlog Methodes Testing Edit Blog Testing should edit the blog and return object",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  params: {\n    blogId: '61c9e680b47e807b87e3dbe9',\n  },\n  body: {\n    title: 'noor',\n    avatar: 'avatar.jpg',\n    accent: 'red',\n    description: 'This is my Blog',\n  },\n};\nblogFunctions.editBlog(func_params).then((res) => {\n  expect(res).to.be.a('object');\n  expect(res.title).to.be.eq( 'noor');\n  expect(res.avatar).to.be.eq('avatar.jpg');\n  expect(res.accent).to.be.eq('red');\n  expect(res.description).to.be.eq('This is my Blog');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "56685b15-108e-4a51-9aac-12536e7a1bf2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return a message as there is another blog with that name",
                  "fullTitle": "UserBlog Methodes Testing Edit Blog Testing should return a message as there is another blog with that name",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  params: {\n    blogId: '61c9e680b47e807b87e3dbe9',\n  },\n  body: {\n    name: blogName,\n  },\n};\nblogFunctions.editBlog(func_params).then((res) => {\n  expect(res).to.be.eq('URL is not available');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "fb9dd0d7-7b19-487f-95db-f8898bd51763",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no a blog with the given id",
                  "fullTitle": "UserBlog Methodes Testing Edit Blog Testing should return null as there is no a blog with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  params: {\n    blogId: '61b33c94c4bab40bee182b6f',\n  },\n  body: {\n    name: 'nour',\n  },\n};\nblogFunctions.editBlog(func_params).then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "85eb2619-3a1b-41d6-beda-205616d9822c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "56685b15-108e-4a51-9aac-12536e7a1bf2",
                "fb9dd0d7-7b19-487f-95db-f8898bd51763",
                "85eb2619-3a1b-41d6-beda-205616d9822c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "dfd75c2c-486e-4dc0-8a44-0ec60fc300c5",
              "title": "Follow Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return object of the followed blog",
                  "fullTitle": "UserBlog Methodes Testing Follow Blog Testing should return object of the followed blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  decoded: {\n     email:email,\n   },\n   body:\n    {\n     blogId:'61c9e7b3b47e807b87e3dc09'\n    },\n };\nuserFunctions.followBlog(func_params).then((res) => {\n  expect(res).to.be.a('object');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "64615288-9bc3-4e74-8f00-be85a3312e28",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no a blog with the given id",
                  "fullTitle": "UserBlog Methodes Testing Follow Blog Testing should return null as there is no a blog with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  decoded: {\n     email:email,\n   },\n   body:\n    {\n     blogId:'61c9e7b3b47e807b87e3dc00'\n    },\n };\nuserFunctions.followBlog(func_params).then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "07a0e4a3-8bad-4c85-b40b-f6326bdf139c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "64615288-9bc3-4e74-8f00-be85a3312e28",
                "07a0e4a3-8bad-4c85-b40b-f6326bdf139c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "1d596043-94ed-40df-992a-8d345a17836d",
              "title": "Does Follow Testing Part 1",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return object of the user if he/she follows this blog",
                  "fullTitle": "UserBlog Methodes Testing Does Follow Testing Part 1 should return object of the user if he/she follows this blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId='61c9e7b3b47e807b87e3dc09';\n   userFunctions.doesFollow(email,blogId).then((res) => {\n   expect(res).to.be.a('object');\n   done();\n }).catch(done);",
                  "err": {},
                  "uuid": "fb41481c-87d2-4c1b-bf6f-d5ac2581f7e7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fb41481c-87d2-4c1b-bf6f-d5ac2581f7e7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "74970833-06ad-43a2-93b0-162d98bd7000",
              "title": "Unfollow Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return object of the unfollowed blog",
                  "fullTitle": "UserBlog Methodes Testing Unfollow Blog Testing should return object of the unfollowed blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  decoded: {\n    email:email,\n  },\n  body: {\n    blogId:'61c9e7b3b47e807b87e3dc09'\n  },\n};\nuserFunctions.unfollowBlog(func_params).then((res) => {\n  expect(res).to.be.a('object');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "6e7c77f9-813c-41da-9a5e-5cc1ec134435",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no a blog with the given id",
                  "fullTitle": "UserBlog Methodes Testing Unfollow Blog Testing should return null as there is no a blog with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const func_params={\n  decoded: {\n     email:email,\n   },\n   body:\n    {\n     blogId:'61c9e7b3b47e807b87e3dc00'\n    },\n };\nuserFunctions.unfollowBlog(func_params).then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "ce4dd1b6-c2f8-4b00-a53b-fe469b91b8dd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6e7c77f9-813c-41da-9a5e-5cc1ec134435",
                "ce4dd1b6-c2f8-4b00-a53b-fe469b91b8dd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "da345396-a972-4501-9567-dbcf2141e363",
              "title": "Does Follow Testing Part 2",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null because the user does not follow this blog any more",
                  "fullTitle": "UserBlog Methodes Testing Does Follow Testing Part 2 should return null because the user does not follow this blog any more",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId='61c9e7b3b47e807b87e3dc09';\n userFunctions.doesFollow(email,blogId).then((res) => {\n   expect(res).to.be.a('null');\n   done();\n }).catch(done);",
                  "err": {},
                  "uuid": "e8616f27-407f-40a5-bc20-1a807ef88312",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e8616f27-407f-40a5-bc20-1a807ef88312"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "ac6fe2c7-f97f-4c7e-98c2-43059bac71d7",
              "title": "Block Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return object of the blocked blog",
                  "fullTitle": "UserBlog Methodes Testing Block Blog Testing should return object of the blocked blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId= '61c9e584b47e807b87e3dbd0';\nconst blockedBlogId='61c9e680b47e807b87e3dbe9';\nblogFunctions.blockBlog(blogId,blockedBlogId).then((res) => {\n  expect(res).to.be.a('object');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "5d7fcf36-c19c-42ab-b440-32c9b20192fb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no a blog with the given id",
                  "fullTitle": "UserBlog Methodes Testing Block Blog Testing should return null as there is no a blog with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId= '61c9e584b47e807b87e3dbd0';\nconst blockedBlogId='61c9e680b4e807b887e3dbe9';\nblogFunctions.blockBlog(blogId,blockedBlogId).then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "7eb880c5-51d9-4f27-9891-eaf8f727143b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5d7fcf36-c19c-42ab-b440-32c9b20192fb",
                "7eb880c5-51d9-4f27-9891-eaf8f727143b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "0a90fcf6-5c3d-4a89-a1b1-7a432621d072",
              "title": "Unblock Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return object of the unblocked blog",
                  "fullTitle": "UserBlog Methodes Testing Unblock Blog Testing should return object of the unblocked blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId= '61c9e584b47e807b87e3dbd0';\nconst blockedBlogId='61c9e680b47e807b87e3dbe9';\nblogFunctions.unblockBlog(blogId,blockedBlogId).then((res) => {\n  expect(res).to.be.a('object');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "544240e9-9695-4024-a203-7eae7b7d5b98",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as there is no a blog with the given id",
                  "fullTitle": "UserBlog Methodes Testing Unblock Blog Testing should return null as there is no a blog with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogId= '61c9e584b47e807b87e3dbd0';\nconst blockedBlogId='61c9e680b00e807b87e3dbe9';\nblogFunctions.unblockBlog(blogId,blockedBlogId).then((res) => {\n  expect(res).to.be.eq(null);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "210b406a-f2c9-4e50-96b4-676b6b2720c7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "544240e9-9695-4024-a203-7eae7b7d5b98",
                "210b406a-f2c9-4e50-96b4-676b6b2720c7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "5fe3ca62-a267-4ea4-8e1c-75b8a7698aac",
              "title": "Delete Blog Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userBlogTest.js",
              "file": "\\test\\userBlogTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the blog",
                  "fullTitle": "UserBlog Methodes Testing Delete Blog Testing should delete the blog",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userFunctions.deleteBlog(email, blogId)\n .then((res)=>{\n expect(res).to.be.a('object');\n done();\n      }).catch(done);",
                  "err": {},
                  "uuid": "f3b090c3-ac38-4473-8ca0-5d46b8dac52d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return false because there is no blog with the requested id",
                  "fullTitle": "UserBlog Methodes Testing Delete Blog Testing should return false because there is no blog with the requested id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userFunctions.deleteBlog(email, blogId)\n    .then((res)=>{\n      expect(res).to.be.eq(null);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "89a3af44-ecd5-4a60-b5e0-81143e011bdc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "f3b090c3-ac38-4473-8ca0-5d46b8dac52d",
                "89a3af44-ecd5-4a60-b5e0-81143e011bdc"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d72e3c71-52e5-4ce8-b1f5-7d7d73b3c945"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b14dd586-4001-4f84-a8c2-0fef4fb4efbb",
          "title": "User Functions",
          "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
          "file": "\\test\\userTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07cbf319-767d-40fd-b9e1-1d55e57d0928",
              "title": "Retrieve User Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the user with the given id",
                  "fullTitle": "User Functions Retrieve User Testing should return the user with the given id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userId='61c9e0215954b6332bc203f0';\n userFunctions.retrieveUser(userId).then((res) => {\n   expect(res).to.be.a('object');\n   done();\n }).catch(done);",
                  "err": {},
                  "uuid": "0b61e67f-42b5-4cdd-93eb-3e170aa0c5b0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return null as the user is not found",
                  "fullTitle": "User Functions Retrieve User Testing should return null as the user is not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userId='61c9e0215994b6332bc203f0';\n userFunctions.retrieveUser(userId).then((res) => {\n   expect(res).to.be.a('null');\n   done();\n }).catch(done);",
                  "err": {},
                  "uuid": "7fb4a8ea-f615-4b71-a15d-666004bdfbdd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0b61e67f-42b5-4cdd-93eb-3e170aa0c5b0",
                "7fb4a8ea-f615-4b71-a15d-666004bdfbdd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "4d534d63-7ebb-47e0-9d44-b0d6155ffbc5",
              "title": "Delete User Testing",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the user and return its primary Blog after deletion",
                  "fullTitle": "User Functions Delete User Testing should delete the user and return its primary Blog after deletion",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userFunctions.deleteUser(userEmail)\n .then((res)=>{\n expect(res).to.be.a('object');\n done();\n      }).catch(done);",
                  "err": {},
                  "uuid": "45382b16-f226-4c8e-8dea-59da8406609e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return false because there is no user with the requested email",
                  "fullTitle": "User Functions Delete User Testing should return false because there is no user with the requested email",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userFunctions.deleteUser(userEmail)\n    .then((res)=>{\n      expect(res).to.be.eq(null);\n      done();\n    }).catch(done);",
                  "err": {},
                  "uuid": "6fe9b67b-5e0e-4374-bd2f-e21ed035e641",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "45382b16-f226-4c8e-8dea-59da8406609e",
                "6fe9b67b-5e0e-4374-bd2f-e21ed035e641"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "b382e865-cc33-4132-a767-67e3b2016631",
              "title": "Update user",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It sets interests of the user",
                  "fullTitle": "User Functions Update user It sets interests of the user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'nour.2020@gmail.com';\nconst interests=[\n  \"flowers\",\n  \"math\",\n  \"nasa\",\n  \"education\"\n]\nuserFunctions.getInterests(email, interests)\n.then((result) => {\n  expect(result.followedTags[0]).to.be.eq(interests[0]);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "b7308d81-1925-4593-8e1d-9c47a70970d9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It updates color theme of the user",
                  "fullTitle": "User Functions Update user It updates color theme of the user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'nour.2020@gmail.com';\nconst colorNumb=3;\nuserFunctions.updateColor(email, colorNumb).then((result) => {\n  console.log('result: ', result);\n  expect(result.bodyColor).to.be.eq(colorNumb);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "7fa91e10-1527-43f9-bf47-cfa792249cae",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b7308d81-1925-4593-8e1d-9c47a70970d9",
                "7fa91e10-1527-43f9-bf47-cfa792249cae"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "1ecceed0-1157-4605-98c5-ecaabe2e7a64",
              "title": "Check Mail Function",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Return True",
                  "fullTitle": "User Functions Check Mail Function It Should Return True",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'ahmed.ayman.1420@gmail.com';\nuserServices.checkMail(email).then((result) => {\n  expect(result).to.be.eq(true);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "385481cc-d2a1-4553-9957-beae81b126b6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should Return False",
                  "fullTitle": "User Functions Check Mail Function It Should Return False",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'Afnan@gmail.com';\nuserServices.checkMail(email).then((result) => {\n  expect(result).to.be.eq(false);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "fb89fbf3-8cc1-45b9-9c56-91ca739058eb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "385481cc-d2a1-4553-9957-beae81b126b6",
                "fb89fbf3-8cc1-45b9-9c56-91ca739058eb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "1524a0a2-b8d9-4e6b-9221-4d248fc6d5da",
              "title": "Check blogName Function",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Return True",
                  "fullTitle": "User Functions Check blogName Function It Should Return True",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogName = 'CMP-2023';\nuserServices.checkBlogName(blogName).then((result) => {\n  expect(result).to.be.eq(true);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "07aa1496-7972-4567-8f15-5f4962bbca8b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should Return False",
                  "fullTitle": "User Functions Check blogName Function It Should Return False",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const blogName = 'ABCD';\nuserServices.checkBlogName(blogName).then((result) => {\n  expect(result).to.be.eq(false);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "be78effe-202b-4c4f-a495-86c08c417a0a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "07aa1496-7972-4567-8f15-5f4962bbca8b",
                "be78effe-202b-4c4f-a495-86c08c417a0a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "36ba474a-f4e5-471f-9178-14d0549983c1",
              "title": "Create User Function",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create New User",
                  "fullTitle": "User Functions Create User Function It Should Create New User",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'ahmed.ayman.cmp@gmail.com';\nconst blogName = 'CMP';\nconst password = '12345';\nconst age = '21';\nuserServices.createUser(email, password, blogName, age).then((result) => {\n  expect(result).to.be.eq('Created');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "ff818b3d-2d00-4aa9-9665-32689d3361fc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ff818b3d-2d00-4aa9-9665-32689d3361fc"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "47fbf2fb-cb87-4920-929a-c7cdc00c6925",
              "title": "Send Verification Mail To User",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Send Verification Mail To User",
                  "fullTitle": "User Functions Send Verification Mail To User It Should Send Verification Mail To User",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const name = 'Rema';\nconst email = 'reem.atala555@gmail.com';\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InJlZW0uYXRhbGE1NTVAZ21haWwuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE2MzkwNzk3MDd9.V3NXoggu_z7xWDQC8XksfFLsfkjuJsIaWqFwH10nBlE';\nuserServices.verifyMail(name, email, token).then((result) => {\n  expect(result).to.be.eq('verification mail sent');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "2a3a3eec-2392-4fe4-b00f-5eb293abb222",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2a3a3eec-2392-4fe4-b00f-5eb293abb222"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "5beaa530-fda9-4e7e-a796-9af5c05eb900",
              "title": "Checks Input Password",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Return True",
                  "fullTitle": "User Functions Checks Input Password It Should Return True",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const password = '123';\nconst oldPassword =\n  '$2b$08$0eaSh6V.pAvCyX8LFE12Ve52cSHUUPVrV0h7DDx0SwA5eCSIGsKsq';\nuserServices.checkPassword(password, oldPassword).then((result) => {\n  expect(result).to.be.eq(true);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "608dc095-39d6-4d47-a63a-38855593f9fe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Should Return False",
                  "fullTitle": "User Functions Checks Input Password It Should Return False",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const password = '12345';\nconst oldPassword =\n  '$2b$08$0eaSh6V.pAvCyX8LFE12Ve52cSHUUPVrV0h7DDx0SwA5eCSIGsKsq';\nuserServices.checkPassword(password, oldPassword).then((result) => {\n  expect(result).to.be.eq(false);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "7b112d8c-c07c-45fe-b1c0-1fc42ab91680",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "608dc095-39d6-4d47-a63a-38855593f9fe",
                "7b112d8c-c07c-45fe-b1c0-1fc42ab91680"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "8509191f-f24a-4f56-85e0-413bab53a84a",
              "title": "Create User Google Function",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create New Google User",
                  "fullTitle": "User Functions Create User Google Function It Should Create New Google User",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'ahmed.ayman.cmp@gmail.com';\nconst password = '12345';\nuserServices.createUser(email, password).then((result) => {\n  expect(result).to.be.eq('Created');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "115d7351-1bc8-47d4-9d51-f7f81cf6996b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "115d7351-1bc8-47d4-9d51-f7f81cf6996b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "820b50d9-c87c-467b-8b11-4f16afbe62f4",
              "title": "Create Primary Blog Function",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create Primary Blog When User Sign up ",
                  "fullTitle": "User Functions Create Primary Blog Function It Should Create Primary Blog When User Sign up ",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = 'ahmedatcmp@gmail.com';\nconst name = 'Game-1';\nuserServices.createPrimaryBlog(email, name).then((result) => {\n  expect(result).to.be.eq('Blog Created');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "747d96b4-8e6e-4502-b208-9c7f098de272",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "747d96b4-8e6e-4502-b208-9c7f098de272"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "d2b4758f-30e4-4efb-b35d-93018456fcd9",
              "title": "Forget Passowrd Mail",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Sned Email To User",
                  "fullTitle": "User Functions Forget Passowrd Mail It Should Sned Email To User",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const name = 'Rema';\nconst email = 'ahmed.ayman.1420@gmail.com';\nuserServices.forgetPasswordMail(name, email).then((result) => {\n  expect(result).to.be.eq('forget password mail sent');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "6856d2e5-5655-4604-a705-9a9a5453b222",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6856d2e5-5655-4604-a705-9a9a5453b222"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "daccf6ba-4b7c-436c-9e90-2f059ce2f264",
              "title": "Check Post Id",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Check Post Id",
                  "fullTitle": "User Functions Check Post Id It Check Post Id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postId = '61ca5d91a8a4556c5b24f1f4';\nuserServices.checkPostId(postId).then((result) => {\n  expect(result).to.be.eq(true);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "4ca49b2b-1cf3-45e7-b507-05b2bef3e1c1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "It Check Post Id",
                  "fullTitle": "User Functions Check Post Id It Check Post Id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postId = '61ca5d91a8a4556c5b24f1f0';\nuserServices.checkPostId(postId).then((result) => {\n  expect(result).to.be.eq(false);\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "b4f67b63-ba16-46c4-b5a1-aba1b5d18866",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "4ca49b2b-1cf3-45e7-b507-05b2bef3e1c1",
                "b4f67b63-ba16-46c4-b5a1-aba1b5d18866"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "83771125-aef0-4a38-95f3-c826c7e52c21",
              "title": "get UserId From PostId ",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "get UserId From PostId ",
                  "fullTitle": "User Functions get UserId From PostId  get UserId From PostId ",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postId = '61ca5d92a8a4556c5b24f1fa';\nuserServices.getUserIdFromPostId(postId).then((result) => {\n  expect(result).to.be.eq('61c9d749b33bf76a71baed86');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "8f67b15a-0366-48e5-8bb7-858f17f3953c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8f67b15a-0366-48e5-8bb7-858f17f3953c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "63b1dbd2-a126-43ff-bdee-7df65cc0a5c8",
              "title": "Create Notification",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create Notification",
                  "fullTitle": "User Functions Create Notification It Should Create Notification",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postId = '61ca5d92a8a4556c5b24f1fa';\nconst type = 'like';\nnotificationFunction.addNotification(postId, type).then((result) => {\n  expect(result).to.be.eq('Created');\n  done();\n}).catch(done);",
                  "err": {},
                  "uuid": "b9225668-cda3-4a83-b406-4373704a0126",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b9225668-cda3-4a83-b406-4373704a0126"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            },
            {
              "uuid": "1b80f13c-0420-47f5-b5f4-3c9b8fb7e014",
              "title": "Create New Chat",
              "fullFile": "D:\\faculty\\CMP3\\software engineering\\phase4\\final\\Backend_Tumblr-4u\\test\\userTest.js",
              "file": "\\test\\userTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It Should Create New Chat Message",
                  "fullTitle": "User Functions Create New Chat It Should Create New Chat Message",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "message = 'Test';\n      sendUserId = '61c9d749b33bf76a71baed86';\n      receiveUserId = '61c9e0215954b6332bc203f0';\n      sendBlogName = 'CMP-2023';\n      recieveBlogName = 'Engineer';\n      notificationFunction.addchat(message, sendUserId, receiveUserId, sendBlogName, recieveBlogName).then((result) => {\n        expect(result).to.be.eq('Created');\n        done();\n      }).catch(done);",
                  "err": {},
                  "uuid": "684e0225-29b0-47b3-bfb9-96675de05317",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "684e0225-29b0-47b3-bfb9-96675de05317"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "Test_Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "reportFilename": "Test_Report"
      },
      "version": "6.0.1"
    }
  }
}